#!/usr/bin/env python

from sys import argv
from os import path
import logging

import time

import json
from decimal import Decimal

import requests


logger = logging.getLogger('getquote-cmc')

logger.addHandler(logging.FileHandler('/var/tmp/getquote-cmc.log'))
logger.setLevel(logging.DEBUG)


# ledger invoking the script on a by-commodity basis. Also, the only way to get
# a price from CMC by currency symbol (as opposed to "currency id" that is
# pretty much internal to CMC) is to get the whole ticker at once.
#
# The latter procedure takes several seconds, so the ticker better be cached
# between launches, otherwise the delay will grow linearly with the number of
# different commodities in the ledger, potentially growing to be as large as
# several minutes or more.
#
# To ensure the cached ticker is only valid between launches and prices never go
# stale because of the caching mechanism, the cached ticker is set to only be
# good for 30 seconds.

# Path to the cached CMC ticker output
TMP_TICKER_PATH = '/tmp/ledger-getquote-cmc-cached_ticker.json'


# Returns the cached ticker in dict form or `None` if the cache is old or
# doesn't exist
def load_cached_ticker():
    try:
        mtime = path.getmtime(TMP_TICKER_PATH)

        ticker = None

        logger.debug("Mtime of cache is {}, time is {}".format(mtime, time.time()))

        if time.time() - mtime < 30:
            logger.debug("Ticker is good")

            return json.load(open(TMP_TICKER_PATH, mode='r'))

        logger.debug("Ticker is old")
    except OSError:
        # Probably the file doesn't exist
        # TODO: implement further checks?

        pass

    return None


def save_cached_ticker(ticker):
    with open(TMP_TICKER_PATH, mode='w') as f:
        json.dump(ticker, f)


def get_ticker_api_url(target_currency=None):
    url = 'https://api.coinmarketcap.com/v1/ticker/'

    if target_currency is not None:
        url += '?convert=' + target_currency

    return url


def get_current_ticker(target_currency=None):
    ticker = load_cached_ticker()

    if ticker is not None:
        return ticker

    logger.debug("No cached ticker")

    ticker = json.loads(requests.get(get_ticker_api_url(target_currency)).content)

    save_cached_ticker(ticker)

    return ticker


def _get_currency_price_suffix(target_currency=None):
    if target_currency is None:
        return ''
    else:
        return '_' + target_currency.lower()


def get_ticker_price(ticker, symbol, target_currency=None):
    for crypto in ticker:
        if crypto['symbol'] == symbol.upper():
            return Decimal(crypto['price' + _get_currency_price_suffix(target_currency)])


if __name__ == '__main__':
    logger.debug(repr(argv))

    start = time.time()

    if len(argv) == 3:
        source_currency = argv[1]

        # The currency the CMC is told to convert the prices into.
        # As of 2018-01-05, valid values are:
        #   "AUD", "BRL", "CAD", "CHF", "CLP", "CNY", "CZK", "DKK", "EUR",
        #   "GBP", "HKD", "HUF", "IDR", "ILS", "INR", "JPY", "KRW", "MXN",
        #   "MYR", "NOK", "NZD", "PHP", "PKR", "PLN", "RUB", "SEK", "SGD",
        #   "THB", "TRY", "TWD", "ZAR".
        # (see https://coinmarketcap.com/api/)
        target_currency = argv[2]

        ticker = get_current_ticker(target_currency)

        price = get_ticker_price(ticker, source_currency, target_currency)

        if price is not None:
            output = "{} {} {:.4f} {}".format(
                time.strftime('%Y-%m-%d %X'),
                source_currency,
                price,
                target_currency
                )

            logger.debug(output)

            print o
        else:
            logger.debug('NONE')

    logger.debug("Execution took {}s".format(time.time() - start))
